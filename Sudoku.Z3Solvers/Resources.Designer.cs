//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sudoku.Z3Solvers {
    using System;
    
    
    /// <summary>
    ///   Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
    /// </summary>
    // Cette classe a été générée automatiquement par la classe StronglyTypedResourceBuilder
    // à l'aide d'un outil, tel que ResGen ou Visual Studio.
    // Pour ajouter ou supprimer un membre, modifiez votre fichier .ResX, puis réexécutez ResGen
    // avec l'option /str ou régénérez votre projet VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Sudoku.Z3Solvers.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Remplace la propriété CurrentUICulture du thread actuel pour toutes
        ///   les recherches de ressources à l'aide de cette classe de ressource fortement typée.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à import clr
        ///clr.AddReference(&quot;Sudoku.Shared&quot;)
        ///clr.AddReference(&quot;Sudoku.Z3Solvers&quot;)
        ///from Sudoku.Z3Solvers import Z3SubstitutionsSolver
        ///netSolver = Z3SubstitutionsSolver()
        ///solvedSudoku = netSolver.Solve(sudoku).
        /// </summary>
        internal static string SelfCallSolver_py {
            get {
                return ResourceManager.GetString("SelfCallSolver.py", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à import z3
        ///from z3 import *
        ///
        ///# 9x9 matrix of integer variables
        ///X = [ [ Int(&quot;x_%s_%s&quot; % (i+1, j+1)) for j in range(9) ]
        ///      for i in range(9) ]
        ///
        ///# each cell contains a value in {1, ..., 9}
        ///cells_c  = [ And(1 &lt;= X[i][j], X[i][j] &lt;= 9)
        ///             for i in range(9) for j in range(9) ]
        ///
        ///# each row contains a digit at most once
        ///rows_c   = [ Distinct(X[i]) for i in range(9) ]
        ///
        ///# each column contains a digit at most once
        ///cols_c   = [ Distinct([ X[i][j] for i in range(9) ])
        ///             for j in r [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string Z3Solver_py {
            get {
                return ResourceManager.GetString("Z3Solver.py", resourceCulture);
            }
        }
    }
}
